Class {
	#name : #SuperCache,
	#superclass : #Object,
	#instVars : [
		'__cached___cachedMethodTemplate',
		'__cached___cachedMethodTemplateTimeKey',
		'cacheTimeKey'
	],
	#category : #'QuickWrap-Core'
}

{ #category : #'as yet unclassified' }
SuperCache class >> generateSuperCacheFor: aMethod [

	| subs targetClass selector templateMethod sourceCode |
	subs := aMethod methodClass subclasses.
	subs ifEmpty: [ 
		^ self inform:
			  'The cache needs to be installed in the first subclass. No subclass detected. Aborting.' ].
	targetClass := subs first.
	selector := aMethod selector.

	templateMethod := SuperCache methodDictionary at:
		                  #__cachedMethodTemplate.
	sourceCode := templateMethod sourceCode trim
		              copyReplaceAll: '__cachedMethodTemplate'
		              with: selector.
	(targetClass slots anySatisfy: [ :s | 
		 s name == (#__cached_ , selector) ]) ifFalse: [ 
		targetClass addSlot: #__cached_ , selector => InstanceVariableSlot.
		targetClass addSlot:
			#__cached_ , selector , #TimeKey => InstanceVariableSlot ].
	targetClass compile: sourceCode
]

{ #category : #'as yet unclassified' }
SuperCache >> __cachedMethodTemplate [

	"Code automatically generated by SuperCache"

	^ cacheTimeKey == __cached___cachedMethodTemplateTimeKey
		  ifTrue: [ __cached___cachedMethodTemplate ]
		  ifFalse: [ 
			  __cached___cachedMethodTemplateTimeKey := cacheTimeKey.
			  __cached___cachedMethodTemplate := super __cachedMethodTemplate ]
]
